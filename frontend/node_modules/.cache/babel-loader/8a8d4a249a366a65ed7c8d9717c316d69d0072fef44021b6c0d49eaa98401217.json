{"ast":null,"code":"/**\r\n * Mengubah angka menjadi format mata uang Rupiah (IDR).\r\n * Contoh: 150000 menjadi \"Rp 150.000\"\r\n * @param {number} number - Angka yang akan diformat.\r\n * @returns {string} String dalam format Rupiah.\r\n */\nfunction formatRupiah(number) {\n  if (isNaN(number)) {\n    return 'Invalid Number';\n  }\n  return new Intl.NumberFormat('id-ID', {\n    style: 'currency',\n    currency: 'IDR',\n    minimumFractionDigits: 0\n  }).format(number);\n}\n\n/**\r\n * Mengubah string tanggal (date string) menjadi format lokal Indonesia.\r\n * Contoh: \"2023-11-12T10:00:00.000Z\" menjadi \"12 November 2023\"\r\n * @param {string} dateString - String tanggal yang valid.\r\n * @returns {string} String tanggal dalam format Indonesia.\r\n */\nfunction formatDate(dateString) {\n  if (!dateString) return '';\n  try {\n    return new Date(dateString).toLocaleDateString('id-ID', {\n      day: '2-digit',\n      month: 'long',\n      year: 'numeric'\n    });\n  } catch (error) {\n    return 'Invalid Date';\n  }\n}\n\n/**\r\n * Mengubah string tanggal (date string) menjadi format tanggal dan waktu.\r\n * Contoh: \"2023-11-12T10:30:00.000Z\" menjadi \"12 November 2023 17.30\"\r\n * @param {string} dateString - String tanggal yang valid.\r\n * @returns {string} String tanggal dan waktu dalam format Indonesia.\r\n */\nfunction formatDateTime(dateString) {\n  if (!dateString) return '';\n  try {\n    return new Date(dateString).toLocaleString('id-ID', {\n      day: '2-digit',\n      month: 'long',\n      year: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  } catch (error) {\n    return 'Invalid Date';\n  }\n}\n\n// Ekspor semua fungsi agar bisa digunakan di proyek lain\nmodule.exports = {\n  formatRupiah,\n  formatDate,\n  formatDateTime\n};","map":{"version":3,"names":["formatRupiah","number","isNaN","Intl","NumberFormat","style","currency","minimumFractionDigits","format","formatDate","dateString","Date","toLocaleDateString","day","month","year","error","formatDateTime","toLocaleString","hour","minute","module","exports"],"sources":["D:/SEMESTER ANTARA PAW/toko-buket-bunga/frontend/node_modules/@biyy/format-rupiah-datetime/index.js"],"sourcesContent":["/**\r\n * Mengubah angka menjadi format mata uang Rupiah (IDR).\r\n * Contoh: 150000 menjadi \"Rp 150.000\"\r\n * @param {number} number - Angka yang akan diformat.\r\n * @returns {string} String dalam format Rupiah.\r\n */\r\nfunction formatRupiah(number) {\r\n  if (isNaN(number)) {\r\n    return 'Invalid Number';\r\n  }\r\n  return new Intl.NumberFormat('id-ID', {\r\n    style: 'currency',\r\n    currency: 'IDR',\r\n    minimumFractionDigits: 0\r\n  }).format(number);\r\n}\r\n\r\n/**\r\n * Mengubah string tanggal (date string) menjadi format lokal Indonesia.\r\n * Contoh: \"2023-11-12T10:00:00.000Z\" menjadi \"12 November 2023\"\r\n * @param {string} dateString - String tanggal yang valid.\r\n * @returns {string} String tanggal dalam format Indonesia.\r\n */\r\nfunction formatDate(dateString) {\r\n  if (!dateString) return '';\r\n  try {\r\n    return new Date(dateString).toLocaleDateString('id-ID', {\r\n      day: '2-digit',\r\n      month: 'long',\r\n      year: 'numeric'\r\n    });\r\n  } catch (error) {\r\n    return 'Invalid Date';\r\n  }\r\n}\r\n\r\n/**\r\n * Mengubah string tanggal (date string) menjadi format tanggal dan waktu.\r\n * Contoh: \"2023-11-12T10:30:00.000Z\" menjadi \"12 November 2023 17.30\"\r\n * @param {string} dateString - String tanggal yang valid.\r\n * @returns {string} String tanggal dan waktu dalam format Indonesia.\r\n */\r\nfunction formatDateTime(dateString) {\r\n  if (!dateString) return '';\r\n  try {\r\n    return new Date(dateString).toLocaleString('id-ID', {\r\n      day: '2-digit',\r\n      month: 'long',\r\n      year: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  } catch (error) {\r\n    return 'Invalid Date';\r\n  }\r\n}\r\n\r\n// Ekspor semua fungsi agar bisa digunakan di proyek lain\r\nmodule.exports = {\r\n  formatRupiah,\r\n  formatDate,\r\n  formatDateTime\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAYA,CAACC,MAAM,EAAE;EAC5B,IAAIC,KAAK,CAACD,MAAM,CAAC,EAAE;IACjB,OAAO,gBAAgB;EACzB;EACA,OAAO,IAAIE,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IACpCC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE,KAAK;IACfC,qBAAqB,EAAE;EACzB,CAAC,CAAC,CAACC,MAAM,CAACP,MAAM,CAAC;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,UAAUA,CAACC,UAAU,EAAE;EAC9B,IAAI,CAACA,UAAU,EAAE,OAAO,EAAE;EAC1B,IAAI;IACF,OAAO,IAAIC,IAAI,CAACD,UAAU,CAAC,CAACE,kBAAkB,CAAC,OAAO,EAAE;MACtDC,GAAG,EAAE,SAAS;MACdC,KAAK,EAAE,MAAM;MACbC,IAAI,EAAE;IACR,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAO,cAAc;EACvB;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACP,UAAU,EAAE;EAClC,IAAI,CAACA,UAAU,EAAE,OAAO,EAAE;EAC1B,IAAI;IACF,OAAO,IAAIC,IAAI,CAACD,UAAU,CAAC,CAACQ,cAAc,CAAC,OAAO,EAAE;MAClDL,GAAG,EAAE,SAAS;MACdC,KAAK,EAAE,MAAM;MACbC,IAAI,EAAE,SAAS;MACfI,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACd,OAAO,cAAc;EACvB;AACF;;AAEA;AACAK,MAAM,CAACC,OAAO,GAAG;EACftB,YAAY;EACZS,UAAU;EACVQ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}